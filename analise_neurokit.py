# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/195Itqpjer9mm2VGLmBjM6y0N2eWt3r1B
"""

!pip install neurokit2

import re
import pandas as pd
import numpy as np
import base64
import base64
import neurokit2 as nk

sampling_rate_hz = 128
time_division = 10 #in minutes

def create_onedrive_directdownload (onedrive_link):
    data_bytes64 = base64.b64encode(bytes(onedrive_link, 'utf-8'))
    data_bytes64_String = data_bytes64.decode('utf-8').replace('/','_').replace('+','-').rstrip("=")
    resultUrl = f"https://api.onedrive.com/v1.0/shares/u!{data_bytes64_String}/root/content"
    return resultUrl

def stringToDataFrame(strList, sep=';'):
  result = list(strList.split(sep))
  # print(result)
  return pd.DataFrame(result).T

# Download example data
#data = nk.data("bio_eventrelated_100hz")
# Get data
onedrive_url = 'https://1drv.ms/t/s!Am-4mS5QxOmCg9tAJUoZ-DG0iIyKmg?e=JEeQAs'
direct_download_url = create_onedrive_directdownload(onedrive_url)
print(direct_download_url)
# data = pd.read_table(direct_download_url, delimiter=';')
data = pd.read_csv(direct_download_url, header=None, names=['Column1'])
data2 = stringToDataFrame(strList=data.Column1.str, sep=';')
data2.columns = ['Column1']
data2.shape

# Preprocess the data (filter, find peaks, etc.)
#processed_data, info = nk.bio_process(ecg=data["ECG"], sampling_rate=500)

# Compute relevant features
#results = nk.bio_analyze(processed_data, sampling_rate=500)

data2 = data2.apply (pd.to_numeric, errors='coerce')
data2 = data2.dropna()
data2 = data2.reset_index(drop=True)

# Process the signal
#df, info = nk.bio_process(ecg=data["ECG"], rsp=data["RSP"], eda=data["EDA"], sampling_rate=100)
df, info = nk.ecg_process(data2['Column1'], sampling_rate=sampling_rate_hz)
# Visualize
df.plot()

qtd = data2.size // (time_division * 60 * sampling_rate_hz) # 10 minutos * 60 segundos * sampling rate (Hz)

analyze_df = pd.DataFrame()
for x in range(0,qtd):
  print(f"Intervalo de {x*76800} at√© {(x+1)*76800}")
  analyze = nk.ecg_analyze(df.iloc[(x*76800):(x+1)*76800], sampling_rate=sampling_rate_hz)
  analyze_df = analyze_df.append(analyze, ignore_index=True)

analyze_df